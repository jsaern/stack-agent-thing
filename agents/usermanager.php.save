<?php
// Call regularly from cron 
// On call determine best thing to be addressed.

// Start by picking a random thing and seeing what needs to be done.


//ini_set('display_startup_errors', 1);
//ini_set('display_errors', 1);
//error_reporting(-1);

//require '/home/wildtay3/public_html/stackr/vendor/autoload.php';
//require '../vendor/autoload.php';
require '/var/www/html/stackr.ca/vendor/autoload.php';

//require_once '../agents/watson.php';
//require_once '../agents/translink.php';

require_once '/var/www/html/stackr.ca/agents/optin.php';
require_once '/var/www/html/stackr.ca/agents/optout.php';
require_once '/var/www/html/stackr.ca/agents/newuser.php';
require_once '/var/www/html/stackr.ca/agents/redpanda.php';


// Agents can make calls with stack privileges
require_once '/var/www/html/stackr.ca/src/stackdb.php';



class Usermanager {

	function __construct(Thing $thing) {

		$this->thing = $thing;
		$this->agent_name = 'usermanager';

		// So I could call
		$this->test = false;
		if ($this->thing->container['stack']['state'] == 'dev') {$this->test = true;}
		// I think.
		// Instead.

        $this->uuid = $thing->uuid;
        $this->to = $thing->to;
        $this->from = $thing->from;
        $this->subject = $thing->subject;
		//$this->sqlresponse = null;

		$this->node_list = array("new user"=>array("opt-in"=>
							array("opt-out"=>array("opt-in","delete"))));

//		echo '<pre> Agent "Usermanager" running on Thing ';echo $this->uuid;echo'</pre>';





//		echo "Calling choice->load('usermanager')";
//		$current_state=$this->thing->choice->load('usermanager');

//		if (!$current_state) {
			// Current state is false.  A decision for that choice was
			// was not found.

//			$this->current_state = 'new user';
//		} else {
//			$this->current_state = $current_state;

//		}



//		$this->thing->choice->Create('usermanager', $this->node_list, $this->current_state);


		// Probably an unnecessary call, but it updates $this->thing.
		$this->thing->Get();


		$this->previous_state = $this->thing->getState('usermanager');
		echo '<pre> Agent "Optin" previous usermanager state: ';echo $this->previous_state;echo'</pre>';


		$this->getSubject();
		$thing_report = $this->setSignals();

		$this->thing_report = $thing_report;
//		echo '<pre> Agent "Usermanager" completed</pre>';
		return;
	}

	public function setSignals() {

		// Develop the various messages for each channel.

		// Thing actions
		// Because we are making a decision and moving on.  This Thing
		// can be left alone until called on next.
		$this->thing->flagGreen(); 

		$thing_report = true;


		// Generate email response.

		// The getSubject has come up with the best assessment
		// of what the current_state is and what the request_state is.
		if ($this->test) {
//			echo '<pre> Agent "Usermanager" $this->current_state '; echo $this->current_state; echo ' </pre>';
//			echo '<pre> Agent "Usermanager" $this->requested_state '; echo $this->requested_state; echo ' </pre>';
			}


		switch ($this->current_state) {
			case 'opt-out':

				// expecting something in the $input to indicate choice
				// to opt-in (again).

				switch ($this->requested_state) {
					case 'opt-in':

						$temp_thing = new Optin($this->thing);
						break;

					case 'opt-out':

						$temp_thing = new Thing(null);
						$temp_thing->Create($this->from, $to = "usermanager", "Stack record: The last choice was opt-out");
						$temp_thing->choice->Create('usermanager',$this->node_list, 'opt-out');
						$links = $temp_thing->choice->makeLinks();

						$temp_thing->flagGreen();
						// And send an acknowledgement e-mail.

						$subject = "Opt-out request re-processed";

						$message = "Thank you for your recent opt-out request.  You had already opted-out of Stackr.  Email opt-in@stackr.co to re-join.\n\n";

						$temp_thing->email->sendGeneric($this->from,"usermanager",$subject,$message, $links['button']);


						echo '<pre> Agent "Usermanager" opt-out email sent to '; echo $this->from; echo ' </pre>';
						echo '<pre> Agent "Usermanager" opt-out email message: '; print_r($message); echo ' </pre>';

//						echo '<pre> Agent "Usermanager" $thing_record->thing: '; print_r($thing_record->thing); echo ' </pre>';

						break;


					case null;
						break;

					default:
		
					} 

				// Check.

				break;







				break;
			case 'opt-in':

				// expecting something in the $input to indicate choice
				// to opt-out.

				switch ($this->requested_state) {
					case 'opt-out':

						$thing_record = new Thing(null);
						$thing_record->Create($this->from, $to = "usermanager", "Stack record: Opt-out");
						$thing_record->choice->Create('usermanager',$this->node_list, 'opt-out', 'thing');
						$links = $thing_record->choice->makeLinks();

						$thing_record->flagGreen();
						// And send an acknowledgement e-mail.

						$subject = "Opt-out request actioned";

						$message = "Thank you for your recent opt-out request.  'usermanager' has accepted your opt-out instruction.  Goodbye for now.  Email opt-in@stackr.co to re-join.\n\n";

						$thing_record->email->sendGeneric($this->from,"usermanager",$subject, $message, $links['button']);


						echo '<pre> Agent "Usermanager" opt-out email sent to '; echo $this->from; echo ' </pre>';
						echo '<pre> Agent "Usermanager" opt-out email message: '; print_r($message); echo ' </pre>';
						break;

					case 'opt-in':

                                                $thing_record = new Thing(null);
                                                $thing_record->Create($this->from, $to = "watson", "s/acknowledged");
						$node_list = array("start"=>array("opt-out","settings"));
                                                $thing_record->choice->Create('choice0',$this->node_list, 'ant', 'start');
                                                $links = $thing_record->choice->makeLinks();

                                                $thing_record->flagGreen();
                                                // And send an acknowledgement e-mail.

                                                $subject = "Opt-out request actioned";

                                                $message = "Here is access to the settings.";

                                                $thing_record->email->sendGeneric($this->from,"usermanager",$subject, $message, $links['button']);


                                                echo '<pre> Agent "Usermanager" opt-out email sent to '; echo $this->from; echo ' </pre>';
                                                echo '<pre> Agent "Usermanager" opt-out email message: '; print_r($message); echo ' </pre>';


						

						break;





					case null;
						break;
					default:
		
					} 

				// Check.

				break;

			case 'new user':

				// expecting something in the $input to indicate choice
				// to opt-in.

				switch ($this->requested_state) {
					case 'opt-in':
						$temp_thing = new Optin($this->thing);
						break;

					case null;
						break;
					default:
		
					} 

				// Check.

				break;
			case null:

				$thing_report = new Newuser($this->thing);

				break;
			default:
				// Guess we have no idea what to do at this point, so...
				$temp_thing = new Redpanda($this->thing);
		//		$redpanda_thing->flagRed();
		}


		// NOTE THAT IT IS REALLY EASY TO CREATE A NEW AGENT TO 'PASS' THE
		// THING TO.
		//		echo '<pre> Agent created a Optout agent</pre>';
		//			$temp_thing = new Optout($this->thing);
		//
		//			// Whereas in the new scheme it would look like this.
		//			$this->thing->choice->Choose("opt-out");
		//			return;


		if (isset($temp_thing)) {
			$thing_report = $temp_thing->thing_report;
		} else {
			$thing_report = array('thing'=>false);
		}

		return $thing_report;
	}



	public function getSubject() {


		// What do we know at this point?
		// We know the nom_from.
		// We have the message.
		// And we know this was directed towards usermanager (or close).

		// So starting with nom_from.
		// Two conditions, we either know the nom_from, or we don't.

		$status = false;
		$this->response = false;

		$input = strtolower($this->to . " " .$this->subject);

// First see what we have on record for this alias.
// Need to decide whether this is a stack call, or whether to create
// a Thing here.

// If it is a new User we will need a Thing.
// If it is an opted-out user, we will need to log a request

		$this->current_state = $this->thing->getState($this->agent_name);

		switch ($this->current_state) {
			case 'opt-out':

				$this->requested_state = $this->discriminateInput($input, array('opt-in', 'opt-out'));
				break;

			case 'opt-in':

				$this->requested_state = $this->discriminateInput($input, array('opt-in', 'opt-out'));
				break;

			case 'new user':

				$this->requested_state = $this->discriminateInput($input, array('opt-in', 'opt-out'));
				break;
			case null;

				$this->newuser();
				break;

			default:
		
			} 




return;

//		echo '<pre> Agent "Usermanager" found this thing "';print_r($thing);echo'"</pre>';

//exit();



//Stack record: Opt-in verification request

// I find this part hard to read and would much prefer a switch style structure.
// But this !== false does seems to be the way to test for this condition
// precisely.


		// First look for the full string to be expected if a stack record 
		// has been opened for this query.
		// We are looking ideally for a clear statement in the 
		// subject line that this is a:
		if (strpos($input, strtolower('Stack record:
				Opt-in verification request')) !== false) {
			echo '<pre> Agent identified a stack record to ignore</pre>';

		// Here I choose not to create a new Opt-in request everytime
		// the stack receives a request from an unknown e-mail with this 
		// framing.
		// $temp_thing = new Optin($this->thing); //

			return;
		}

		// Next step, see if it's something trivial like a stack described
		// setting like:  Yeah that's how this goes until the Bayes
		// agent is coded.  That needs the Accounting and Choice class
		// to be reliable.

		if (strpos($input, strtolower('New user request')) !== false) {
			echo '<pre> Agent created an Optin agent</pre>';
			$temp_thing = new Optin($this->thing);

			// Whereas in the new scheme it would look like this.
			$this->thing->choice->Choose("new user");
			return;
		}

		if (strpos($input, 'optin') !== false) {
			echo '<pre> Agent created a Optin agent</pre>';
			$temp_thing = new Optin($this->thing);

			// Whereas in the new scheme it would look like this. etc.
			$this->thing->choice->Choose("opt-in");

			return;
		}

		if (strpos($input, 'optout') !== false) {
		echo '<pre> Agent created a Optout agent</pre>';
			$temp_thing = new Optout($this->thing);

			// Whereas in the new scheme it would look like this.
			$this->thing->choice->Choose("opt-out");
			return;
		}

		if (strpos($input, 'opt-in') !== false) {
		echo '<pre> Agent created a Optin agent</pre>';
			$temp_thing = new Optin($this->thing);

			// Whereas in the new scheme it would look like this.
			$this->thing->choice->Choose("opt-in");

			return;
		}

		if (strpos($input, 'opt-out') !== false) {
		echo '<pre> Agent created a Optout agent</pre>';
			$temp_thing = new Optout($this->thing);

			// Whereas in the new scheme it would look like this.
			$this->thing->choice->Choose("opt-out");
			return;
		}





	return $status;		
	}








	function newuser() {

		$this->thing = new Thing(null);
		$this->thing->Create($this->from, $this->agent_name, "Stack record: New user");

//		$node_list = array("new user"=>array("opt-in"=>array("opt-out"=>"opt-in")));


		$this->thing->choice->Create($this->agent_name, $this->node_list, "new user");


		$this->thing->flagGreen();

		return;
	}

	function kill() {
		return $this->thing->Forget();
	}









	function setState() {
		

		//preg_match('[opt-in|optin]', $input);
		//preg_match('[opt-out|optout]', $input);
		return;

	}




	function discriminateInput($input, $discriminators = null) {

		$default_discriminator_thresholds = array(2=>0.3, 3=>0.3, 4=>0.3);

		if (count($discriminators) > 4) {
			$minimum_discrimination = $default_discriminator_thresholds[4];
		} else {
			$minimum_discrimination = $default_discriminator_thresholds[count($discriminators)];
		}

		//$input = "optout opt-out opt-out";

		if ($discriminators == null) {
			$discriminators = array('opt-in', 'opt-out');
		}	

		$aliases = array();

		$aliases['opt-in'] = array('optin','accept','okay','yes', 'sure');
		$aliases['opt-out'] = array('optout','leave','unsubscribe','no','quit');
			
		$words = explode(" ", $input);

		$count = array();

		$total_count = 0;
		// Set counts to 1.  Bayes thing...	
		foreach ($discriminators as $discriminator) {
			$count[$discriminator] = 1;
			$total_count = $total_count + 1;
		}
		// ...and the total count.



		foreach ($words as $word) {

			foreach ($discriminators as $discriminator) {

				if ($word == $discriminator) {
					$count[$discriminator] = $count[$discriminator] + 1;
					$total_count = $total_count + 1;
						echo "sum";
				}

				foreach ($aliases[$discriminator] as $alias) {

					if ($word == $alias) {
						$count[$discriminator] = $count[$discriminator] + 1;
						$total_count = $total_count + 1;
						echo "sum";

					}
				}
			}

		}

		echo "total count"; $total_count;
		// Set total sum of all values to 1.

		$normalized = array();
		foreach ($discriminators as $discriminator) {
			$normalized[$discriminator] = $count[$discriminator] / $total_count;		
		}
	

		// Is there good discrimination
		arsort($normalized);


		// Now see what the delta is between position 0 and 1

		foreach ($normalized as $key=>$value) {
			//echo $key, $value;
			if ( isset($max) ) {$delta = $max-$value; break;}
			if ( !isset($max) ) {$max = $value;$selected_discriminator = $key; }
		}


			echo '<pre> Agent "Usermanager" normalized discrimators "';print_r($normalized);echo'"</pre>';


		if ($delta >= $minimum_discrimination) {
			//echo "discriminator" . $discriminator;
			return $selected_discriminator;
		} else {
			return false; // No discriminator found.
		} 

		return true;
	}









}









?>
