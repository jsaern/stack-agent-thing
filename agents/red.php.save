<?php
//echo '<pre> Agent "Receipt" started running on Thing ';echo date("Y-m-d H:i:s");echo'</pre>';

// Call regularly from cron 
// On call determine best thing to be addressed.

// Start by picking a random thing and seeing what needs to be done.


ini_set('display_startup_errors', 1);
ini_set('display_errors', 1);
error_reporting(-1);

//require '/home/wildtay3/public_html/stackr/vendor/autoload.php';
//require '../vendor/autoload.php';
require '/var/www/html/stackr.ca/vendor/autoload.php';
//require_once '/var/www/html/stackr.ca/public/phpqrcode.php';



class Red {

	function __construct(Thing $thing, $agent_input = null) {

		if ($agent_input == null) {$agent_input = '';}
		$this->agent_input = $agent_input;

		// Given a "thing".  Instantiate a class to identify and create the
		// most appropriate agent to respond to it.
		$this->thing = $thing;
		$this->agent_name = 'receipt';

		// Get some stuff from the stack which will be helpful.
		$this->web_prefix = $thing->container['stack']['web_prefix'];
		$this->stack_state = $thing->container['stack']['state'];
		$this->short_name = $thing->container['stack']['short_name'];


		// Create some short-cuts.
	        $this->uuid = $thing->uuid;
	        $this->to = $thing->to;
	        $this->from = $thing->from;
	        $this->subject = $thing->subject;
		//$this->sqlresponse = null;



		$this->thing->log('<pre> Agent ' . ucfirst($this->agent_name) . '" started running on Thing ' . date("Y-m-d H:i:s") . '</pre>');
		$this->node_list = array("red flag"=>array("green flag"=>array("green flag"),"red flag"));

//		$this->aliases = array("learning"=>array("good job"));

$this->thing->log( '<pre> Agent "Train" constructed a Thing '. $this->uuid . '</pre>');
$this->thing->log( '<pre> Agent "Train" received this Thing "' . $this->uuid . '"</pre>');

		//echo "construct email responser";

		// If readSubject is true then it has been responded to.
		// Forget thing.


		$this->readSubject();
		$this->respond();


	}

	public function respond() {



		// Thing actions

		$this->thing->json->setField("settings");
		$this->thing->json->writeVariable(array("receipt",
			"received_at"),  $this->thing->json->time()
			);


		$this->thing->flagGreen();


		// What receipts states are there.
		// "Hi.  I'm receipt management.  How can I help you."

		// figure out how set do aliases fluidly "good job"="learning".
		// For now.

		
		foreach ($this->aliases as $alias) {

			// Find out if the array test is in the aliase "database"?  But
			// want to avoid database calls.  They clearly have a real world
			// cost.  We are setting the paramenters for what 100 satoshi costs.
			// Because triggering the db connections issue has to have real 
			// world consequences.

		}



		$this->thing->choice->Create('receipt', $this->node_list, "receipt managing");

		$choices = $this->thing->choice->makeLinks('receipt start');
//		$html_button_set = $links['button'];



		$from = $this->from;
		$to = $this->to;

		//echo "from",$from,"to",$to;

		$subject = $this->subject;

		// Now passed by Thing object
		$uuid = $this->uuid;
		$sqlresponse = "yes";

$message = "Thank you $from your message to stackr.co account '$to' has been accepted by " . $this->short_name .".  Keep on stacking.\n\n<p>" . $this->web_prefix . "thing/$uuid\n$sqlresponse \n\n<br> ";
$message .= '<img src="' . $this->web_prefix . 'thing/'. $uuid.'/receipt.png" alt="thing:'.$uuid.'" height="92" width="92">';



$this->sms_message = "TRAIN | ";
$this->sms_message .= "This is a Train with Thing <" . $this->uuid ."> in it.";
$this->sms_message .= ' | TEXT ?';
$this->thing_report['sms'] = $this->sms_message;

                if ( is_numeric($this->from) ) {
                        require_once '/var/www/html/stackr.ca/agents/sms.php';

                        $this->readSubject();

                        $sms_thing = new Sms($this->thing, $this->sms_message);
                        $thing_report['info'] = 'SMS sent';

                //return $thing_report;
                }

        //require_once '/var/www/html/stackr.ca/agents/makeemail.php';
        //$email_thing = new Makeemail($this->thing);

	//$this->thing_report['email'] = $email_thing->thing_report['email'];

//echo $this->thing_report['email'];
//var_dump($email_thing);
//exit();

if ( $this->thing->account['thing']->balance['amount'] < 0 ) {
	// Sufficiient balance to send an email

//	require_once '/var/www/hmtl/stackr.ca/agents/makeemail.php';
//	$email_thing = new Makeemail($this->thing);


	$this->thing->email->sendGeneric($from, "receipt", $subject, $message, $choices);
	$this->thing->account['thing']->Credit(100);
}

//$this->thing_report['sms'] = "Receipt " . $this->uuid . ' created ' . $this->thing->thing->created_at;

//$this->thing_report['email'] = array('to'=>$from,
//					'from'=>'receipt',
//					'subject'=>$subject,
//					'message'=>$message,
//					'choices'=>$choices);

		$this->PNG();
		$this->thing_report['thing'] = $this->thing->thing;

	require_once '/var/www/html/stackr.ca/agents/makeemail.php';
        $email_thing = new Makeemail($this->thing);

        $this->thing_report['email'] = $email_thing->thing_report['email'];


		return $this->thing_report;
	}



	public function readSubject() {


		$status = true;
	return $status;		
	}

        public function PNG() {
// Thx https://stackoverflow.com/questions/24019077/how-to-define-the-result-of-qrcodepng-as-a-variable

//I just lost about 4 hours on a really stupid problem. My images on the local server were somehow broken and therefore did not display in the browsers. After much looking around and testing, including re-installing apache on my computer a couple of times, I traced the problem to an included file.
//No the problem was not a whitespace, but the UTF BOM encoding character at the begining of one of my inluded files...
//So beware of your included files!
//Make sure they are not encoded in UTF or otherwise in UTF without BOM.
//Hope it save someone's time.

//http://php.net/manual/en/function.imagepng.php

//header('Content-Type: text/html');
//echo "Hello World";
//exit();

//header('Content-Type: image/png');
//QRcode::png('PHP QR Code :)');
//exit();
                // here DB request or some processing
                $codeText = "thing:".$this->uuid;

		ob_clean();
                ob_start();

                QRcode::png($codeText,false,QR_ECLEVEL_Q,4); 
                $image = ob_get_contents();

		ob_clean();
// Can't get this text editor working yet 10 June 2017

//$textcolor = imagecolorallocate($image, 0, 0, 255);
// Write the string at the top left
//imagestring($image, 5, 0, 0, 'Hello world!', $textcolor);

$this->thing_report['png'] = $image;
//echo $this->thing_report['png']; // for testing.  Want function to be silent.

                return $this->thing_report['png'];
                }




}









?>
