<?php

ini_set('display_startup_errors', 1);
ini_set('display_errors', 1);
error_reporting(-1);

//require '../vendor/autoload.php';
require '/var/www/html/stackr.ca/vendor/autoload.php';
require_once '/var/www/html/stackr.ca/agents/message.php';
ini_set("allow_url_fopen", 1);

class Train {

	public $var = 'hello';


    function __construct(Thing $thing) {
	//function __construct($arguments) {

		//echo $arguments;
		//var_dump($arguments);
//  $defaults = array(
//    'uuid' => Uuid::uuid4(),
//    'from' => NULL,
//	'to' => NULL,
//	'subject' => NULL,
//	'sqlresponse' => NULL
//  );

//  $arguments = array_merge($defaults, $arguments);

//  echo $arguments['firstName'] . ' ' . $arguments['lastName'];




		$this->thing = $thing;
		$this->character_thing = $thing;
		$this->agent_name = 'character';

                $this->thing_report = array('thing' => $this->thing->thing);


		// So I could call
		if ($this->thing->container['stack']['state'] == 'dev') {$this->test = true;}

		$this->api_key = $this->thing->container['api']['translink'];

		$this->retain_for = 48; // Retain for at least 48 hours.

        $this->uuid = $thing->uuid;
        $this->to = $thing->to;
        $this->from = $thing->from;
        $this->subject = strtolower($thing->subject);



		$this->sqlresponse = null;

		// Allow for a new state tree to be introduced here.
		$this->node_list = array("start"=>array("useful", "useful?"));

		$this->thing->log( '<pre> Agent "Character" running on Thing ' . $this->uuid . '</pre>');
		$this->thing->log( '<pre> Agent "Character" received this Thing "' . $this->subject .  '"</pre>');

		$this->trainsGet();

		// If this return true then no existing characters found.

		$this->getTrain(); // Should load up current

		$this->readSubject();

                if (($this->response == true)) {

	                $this->thing_report['info'] = 'No train response created.';
        	        $this->thing_report['help'] = 'This is the train manager.  NEW.  JOIN <4 char>.  LEAVE <4 char>.';
                	$this->thing_report['num_hits'] = $this->num_hits;

			        $this->thing->flagGreen();

              		$this->thing->log( '<pre> Agent "Train" completed</pre>' );

                	return $this->thing_report;

                

		}

		$this->thing_report = $this->respond();

		$this->trainSet();

		$this->thing->log( '<pre> Agent "Train" completed</pre>' );

                $this->thing_report['log'] = $this->thing->log;


		return;

		}


        public function nullAction() {

                        $this->thing->json->setField("variables");
                        $names = $this->thing->json->writeVariable( array("character", "action"), 'null' );


                $this->message = "TRAIN | Request not understood. | TEXT SYNTAX";
                $this->sms_message = "TRAIN | Request not understood. | TEXT SYNTAX";
                $this->response = true;
                return $this->message;
        }


	function trainSet() {


                $this->thing->log( '<pre> Agent "Train" called trainSet()</pre>' );

                // Store counts

//		echo $this->from;
//exit();

		//if (!isset ( $this->character_thing ) ) {
		//	$this->character_thing = $this->thing;
		//}


                $this->train_thing->db->setFrom($this->from);

                $this->train_thing->json->setField("variables");

                $this->train_thing->json->writeVariable( array("train", "head_code") , $this->head_code  );

                $this->train_thing->json->writeVariable( array("train", "consist") , $this->consist  );
		        $this->train_thing->json->writeVariable( array("train", "stops") , $this->stops  );
                $this->train_thing->json->writeVariable( array("train", "run_time") , $this->run_time );

                $this->train_thing->json->writeVariable( array("train", "run_at") , $this->run_at );

                $this->train_thing->json->writeVariable( array("train", "alias") , $this->alias );
                $this->train_thing->json->writeVariable( array("train", "jobs") , $this->jobs );
                $this->train_thing->json->writeVariable( array("train", "flag_token") , $this->flag_token  );


                //$this->age_thing->json->writeVariable( array("character", "earliest_seen"), $this->earliest_seen   );


                $this->train_thing->flagGreen();
		}



	function trainsGet() {


                $this->thing->json->setField("variables");
                $time_string = $this->thing->json->readVariable( array("train", "refreshed_at") );

                if ($time_string == false) {
                        // Then this Thing has no character information
                        $this->thing->json->setField("variables");
                        $time_string = $this->thing->json->time();
                        $this->thing->json->writeVariable( array("train", "refreshed_at"), $time_string );
                }

                $this->thing->db->setFrom($this->from);
                $thing_report = $this->thing->db->agentSearch('train', 99);
                $things = $thing_report['things'];


                $this->sms_message = "";
                $reset = false;


		if ( $things == false  ) {

                        // No character information store found.
                        $this->resetTrain();

                } else {

			$this->trains = array();
			$this->seen_trains = array();
                        foreach ($things as $thing) {

                                $thing = new Thing($thing['uuid']);

				$this->train_uuid = $thing->uuid;

                                $thing->json->setField("variables");
                                $this->head_code = $thing->json->readVariable( array("train", "head_code") );


				if ( in_array($this->head_code, $this->seen_trains) ) {
					continue;
				} else {
					$this->seen_trains[] = $this->head_code;
				}

                                $this->consist = $thing->json->readVariable( array("train", "consist") );
                                $this->stops = $thing->json->readVariable( array("train", "stops") );
                $this->run_time = $thing->json->readVariable( array("train", "run_time") );
                $this->run_at = $thing->json->readVariable( array("train", "run_at") );
                                $this->alias = $thing->json->readVariable( array("train", "alias") );
                                $this->jobs = $thing->json->readVariable( array("train", "jobs") );
                                $this->flag_token = $thing->json->readVariable( array("train", "flag_token") );

				$train = array("head_code"=>$this->head_code,
						"consist"=>$this->consist,
						"stops"=>$this->stops,
						"run_time"=>$this->run_time,
                        "run_at"=>$this->run_at,
						"alias"=>$this->alias,
						"jobs"=>$this->jobs,
						"flag_token"=>$this->flag_token);

                                if ( ($this->head_code == false) or
                                        ($this->consist == false) or
					($this->stops == false) or
                                        ($this->run_time == false) or
                                        ($this->alias == false) or
                                        ($this->jobs == false) or
					($this->flag_token == false)
 								) {
					$this->thing->log('Agent "Train" found no existing train information');
//					$this->thing->log ( "No character info found.  Created a random character.");
//                                        $this->randomCharacter();
                                } else {
					
					$this->age = $thing->thing->created_at;


                                	$train = array("head_code"=>$this->head_code,
						"uuid"=>$this->train_uuid,
                                                "consist"=>$this->consist,
                                                "stops"=>$this->stops,
                                                "run_time"=>$this->run_time,
                                                   "run_at"=>$this->run_at,
                                                "alias"=>$this->alias,
                                                "jobs"=>$this->jobs,
                                                "flag_token"=>$this->flag_token,
						"age"=>$this->age);


                                        // Successfully loaded most recent character Thing
					// and stored the other characters in an array
					$this->trains[] = $train;
                                        //$this->character_thing = $thing;
					//$this->age = $thing->thing->created_at;
                                        //return;

                                }

                        }
//var_dump($this->characters);
//exit();
//			$this->characters = array_unique($this->characters);

			if (count($this->trains) == 0) {
				return true;

			}


//		var_dump($this->characters);
//exit();

//		foreach ($this->characters as $character) {
//			if ($character['name'] == )


		//$this->randomCharacter();

                //}

		}

	return $this->trains;


	}





	function trainReport() {


                        $this->sms_message = "TRAIN";
//                      if (count($t) > 1) {$this->sms_message .= "ES";}

                        $this->sms_message .= " | ";

                        $this->sms_message .= $this->head_code . ' | ';

                        $this->sms_message .= "CONSIST " . $this->consist . ' ';
			$this->sms_message .= "STOPS " . $this->stops . ' ';
			$this->sms_message .= "RUNTIME " . $this->run_time . ' ';
            $this->sms_message .= "RUN AT " . $this->run_at . ' ';
			$this->sms_message .= "ALIAS " . $this->alias . ' ';
			$this->sms_message .= "JOBS " . $this->jobs . ' ';
			$this->sms_message .= "FLAG TOKEN " . $this->flag_token . ' | ';



                        $this->sms_message .= "TEXT HELP";

		return;


	}

	function trainList() {


                        $this->sms_message = "TRAIN > LIST";
//                      if (count($t) > 1) {$this->sms_message .= "ES";}

                        $this->sms_message .= " | ";

//                $this->sms_message .= $this->name . ' | ';

		if ( count($this->trains) == 0) {
			$this->sms_message .= "No trains found. | TEXT NEW RANDOM TRAIN";
		} else {       
                //$this->sms_message .= $this->name . ' | ';
			$count = 0;
 	        	foreach($this->trains as $train) {
	
			$count += 1;
                        $this->sms_message .= "" . $train['head_code'] . '';
                        $this->sms_message .= ' | ';

				if ( strlen($this->sms_message . ( count($this->trains) - $count ) . " more found. | TEXT HELP") > 159 ) {
					$this->sms_message = $this->sms_message . ( count($this->trains) - $count ) . " more found. | ";
					break;
				}
			}


                        $this->sms_message .= "TEXT HELP";
		}
                return;


        }



        function trainSyntax() {


                        $this->sms_message = "TRAIN > SYNTAX";
//                      if (count($t) > 1) {$this->sms_message .= "ES";}

                        $this->sms_message .= " | ";

                        $this->sms_message .= '<qualifier> TRAIN <command> | ';


                        $this->sms_message .= "TEXT [ TRAIN REPORT | HELP ]";

                return;


        }



        function trainInfo() {


                        $this->sms_message = "TRAIN > INFORMATION";
//                      if (count($t) > 1) {$this->sms_message .= "ES";}

                        $this->sms_message .= " | ";

                        $this->sms_message .= "The current train is " .$this->head_code . ' | ';
                        $this->sms_message .= "The train age is " .$this->age . ' | ';

                        $this->sms_message .= "TEXT [ CHARACTER REPORT | HELP ]";

                return;

        }


        function trainHelp() {

                        $this->sms_message = "TRAIN | HELP";
//                      if (count($t) > 1) {$this->sms_message .= "ES";}

                        $this->sms_message .= " | ";

                        $this->sms_message .= "Trains are Things which you can talk to.  There are player trains, and non-player trains.  Trains are a group of things with character...";

			$this->sms_message .= " | ";


                        $this->sms_message .= "TEXT [ NEW RANDOM CHARACTER | WHATIS ]";

                return;


        }




// -----------------------

	private function respond() {

		//$this->thing_report = array('thing' => $this->thing->thing);

		// Thing actions
		$this->thing->flagGreen();

//		$this->readSubject();

//		$this->characterReport();

                        $this->thing_report['sms'] = $this->sms_message;
                        $this->thing_report['choices'] = false;
                        $this->thing_report['info'] = 'SMS sent';



		// Generate email response.

		$to = $this->thing->from;

// Testing 
//	$to = 'redpanda.stack@gmail.com';

		$from = "character";

		//	$message = $this->readSubject();

		//$message = "Thank you for your request.<p><ul>" . ucwords(strtolower($response)) . '</ul>' . $this->error . " <br>";

			$this->thing->choice->Create($this->agent_name, $this->node_list, "start");
			$choices = $this->thing->choice->makeLinks('start');
			$this->thing_report['choices'] = $choices;


			// Need to refactor email to create a preview of the sent email in the $thing_report['email']
			// For now this attempts to send both an email and text.

        	        $message_thing = new Message($this->thing, $this->thing_report);


	                $this->thing_report['info'] = $message_thing->thing_report['info'] ;


			$this->thing_report['help'] = 'Train development.';

		return $this->thing_report;


	}

	public function resetTrain () {

                $this->thing->log( '<pre> Agent "Train" called resetTrain()</pre>' );


                $this->sms_message = "Empty train created. | ";
                $this->count = 0;

                $this->head_code = '0O00';

            $this->stops = "Camp";
            $this->consist = "Z";
            $this->jobs = "X";
            $this->run_time = "200";
            $this->run_at = array("day"=>"MON", "date"=>"9-15", "time"=>"0000");
            $this->alias = "Train 1";
           $this->flag_token = "RED";


                $this->train_thing = new Thing(null);
                $this->train_thing->Create($this->from , 'train', 's/ reset train');

$this->trainSet();

                $this->train_thing->flagGreen();

                return;
        }


        function nameTrain ($name = null) {

                $this->thing->log( '<pre> Agent "Train" name applies to ' . $this->name . '</pre>' );


                $this->sms_message = 'CHARACTER | "' . $this->name . '" renamed "' . $name . '". | TEXT ' . strtoupper($name);
                $this->count = 0;

		if ($name == null) { $this->name = "Norman the Barbarian"; } else { 
                $this->name = $name;}


//$this->character_thing = $this->thing;


		$this->trainSet();
//$this->character_thing = $this->thing;

                //$this->character_thing = new Thing(null);
                //$this->character_thing->Create($this->from , 'character', 's/ reset character');
                //$this->character_thing->flagGreen();

                return;
        }


        public function randomTrain () {

                $this->thing->log( '<pre> Agent "Train" called randomTrain()</pre>' );


                $this->sms_message = "Random train. | ";
                $this->count = 0;

		$nominals = array('a','b','c');

$adjectives = array('A', 'B', 'C','stupendous','quixotic','horrible','great','blonde','artificial','kinetic',
			'normal','awful','terrible','small','tiny','fantastic','fascinating','hilarious','deafening');

		$adjective = $adjectives[array_rand($adjectives)];
		$nominal = $nominals[array_rand($nominals)];


                $this->head_code = "0O00";

                $this->consist = ucwords( $adjective ) . ucwords( $nominal );
                $this->stops  = array("start"=>"Alpha", "stop 1"=> "Bravo", "stop 2" => "Charlie");
                $this->run_time = "60";
                $this->run_at = "0000";

                $this->alias = "Stalybridge to Piccadilly";



                $this->flag_token = "GREEN";


//$this->character_thing = $this->thing;

                $this->train_thing = new Thing(null);
                $this->train_thing->Create($this->from , 'train', 's/ new random train');

		$this->trainSet();

                $this->train_thing->flagGreen();

                return;
        }




	public function getTrain($search_name = null) {

        $this->thing->log( '<pre> Agent "Train" called getTrain()</pre>' );

        if ($search_name == null) {

            if (count($this->trains) == 0) {return true;}

			$train = $this->trains[0];
            //       $min_distance = $distance;

            $this->head_code = $train["head_code"];
            $this->train_uuid = $train["uuid"];
            $this->consist = $train["consist"];
            $this->jobs = $train["jobs"];
            $this->run_time = $train["run_time"];
            $this->run_at = $train["run_at"];
            $this->alias = $train["alias"];
            $this->stops = $train["stops"];
            $this->age = $train["age"];

		return;
		}




		$min_distance = 255;
		$found_flag = false;
        foreach ($this->trains as $train) {

            $distance = levenshtein($train['head_code'], $search_name);

            if ($distance < $min_distance) {
                $found_flag = true;
                $min_distance = $distance;

                $this->head_code = $train["head_code"];
                $this->train_uuid = $train["uuid"];
                $this->consist = $train["consist"];
                $this->jobs = $train["jobs"];
                $this->run_time = $train["run_time"];
                $this->run_at = $train["run_at"];
                $this->alias = $train["alias"];
                $this->stops = $train["stops"];
                $this->age = $train["age"];

		        $this->thing->log( '<pre> Agent "Train" processing ' . $this->head_code . ' ' . $distance.  '</pre>' );

            }

    		// This is an internal function.  Doesn't set sms/message.  That
	    	// is the job of the character<command> functions.

            if ( !$found_flag ) {

    			$this->train_thing = $this->thing;
                $this->thing->log( '<pre> Agent "Train" got no train result. </pre>' );
                //      $group = "meep";

            } else {

                $this->sms_message .= " | This is " . $this->head_code . " Commands: TBD";
    			$this->train_thing = new Thing($this->train_uuid);
                $this->thing->log( '<pre> Agent "Train" got train' . $this->head_code . ' is Levenshtein closest.</pre>' );

                // $this->thingreport['character'] = $characters; 
            }

             //$this->sms_message = " | ". strtoupper( $this->group_id ) . " | " .$this->sms_message;
        }

        $this->thing->log( '<pre> Agent "Train" found ' . implode(" ",$trains) . '</pre>' );

    return;

    }


	function rollAbility () {
		$arr = array('a','b','c','d');

		$minimum = 6;
		$sum = 0;

		foreach ($arr as $item) {
			$roll = rand(1,6);
			if ($roll < $minimum) {$minimum = $roll;}
			$sum = $sum + $roll;
		}

		$score = $sum - $minimum;

		return $score;
	}


	private function nextWord($phrase) {}



	public function readSubject() {

                $this->thing->log( '<pre> Agent "Train" started to read "' . $this->subject . '"</pre>' );

		$this->num_hits = 0;


//$this->charactersGet(); // Load users characters into memory
                $input = strtolower($this->to . " " .$this->subject);

                $pieces = explode(" ", strtolower($input));


		$this->trainList();

        $matches = array();

        foreach($pieces as $key=>$piece) {

            $common_words = array('the');
            foreach ($this->trains as $train) {

var_dump($train);

                $alias_array = explode(" ", strtolower($train['alias']));

                foreach ($alias_array as $alias_word) {

                    if ($alias_word == $piece ) {
                        if (!in_array($piece, $common_words) ) {
                            $matches[] = $train;
                            $this->num_hits += 1;
                        }
                    }
                }
            }
        }







//[A-Z]{2}\d{6}
$pattern = "|\d[A-Za-z]{1}\d{2}|";
foreach($pieces as $key=>$piece) {

    if (preg_match($pattern, $piece, $m)) {

        $this->num_hits += 1;

        echo "Yes, A Match";
        echo $piece;
    }
                echo $piece;
}





		$matches = array_unique($matches);

                if ( count($matches) == 1 ) {

	                $this->thing->log( '<pre> Agent "Train" $this->head_code input ' . $this->head_code . '</pre>' );
                        $this->getTrain($matches[0]['head code']); 
	                $this->thing->log( '<pre> Agent "Train" $this->head_code output ' . $this->head_code . '</pre>' );

                }

		if ( count($matches) == 0 ) {

	                $this->thing->log( '<pre> Agent "Train" did not match any trains</pre>' );
			$this->nullAction();

		}

		$this->response = null;


//http://speednetwork14.adk2x.com/ul_cb/imp?p=70459751&ap=1304&ct=html&u=http%3A%2F%2Fwww.angelfire.com%2Fme3%2FPrOzaCc%2Fdndkeywords.html&r=https%3A%2F%2Fwww.google.ca%2F&iss=0&f=1&popunderPrivateSize=800x600&ci=3

		$keywords = array('train', 'flag', 'flg', 'signal', 'token', 'gold', 'red', 
			'orange', 'yellow', 'blue', 'cyan', 'indigo', 'green'
			);


		$input = strtolower($this->subject);

		$prior_uuid = null;


// So at this point we have the latest/current character loaded.

// Check if this is a call to the current character

//                                if (strpos(strtolower($this->subject), strtolower($this->name)) !== false) {

                                 //       $this->characterReport($this->name);
                                 //       $this->num_hits += 1;

                                 //       return $this->response;
                               // }

// Or is the subject in the character name?

                                //if (strpos(strtolower($this->name), strtolower($this->subject )) !== false) {
					// If nothing else use this.
                                 //       $this->characterReport($this->name);
                                 //       $this->num_hits += 1;

                                 //       return $this->response;
                               // }

// So now at this point we know the subject doesn't match the character name.

		$pieces = explode(" ", strtolower($input));

                if (count($pieces) == 1) {

                $this->thing->log('<pre>Agent "Train" checking keywords.</pre>');

                        $input = $this->subject;

// PULL TRAIN NUMBER HERE EVENTUALLY SOON.



                        if (ctype_alpha($this->subject[0]) == true) { // If the first character of the keyword is a letter
                                // Strip out first letter and process remaning 4 or 5 digit number
                                //$input = substr($input, 1);
			}


                        if (is_numeric($this->subject) and strlen($input) == 5 ) { // If this is a five-digit number
				//echo "meep";
                                //return $this->stopTranslink($input);
                                //return $this->response;
                        }

                        if (is_numeric($this->subject) and strlen($input) == 4 ) { // If this is a four-digit number
                                //return $this->busTranslink($input);
                                //return $this->response;
                        }

//			$this->getCharacter($this->subject);

                        if ( $this->subject == 'train' ) { // If this is a four-digit number
				$this->trainReport();
				return;
                        }



			if (count($matches) == 0) {$this->nullAction();
                        $this->thing->log( '<pre> Agent "Train" did not respond to any keywords and there are no train matches.</pre>' );

}

			if (count($matches) == 1) {
			    $this->trainReport();
                $this->thing->log( '<pre> Agent "Train" did not respond to any keywords and there was one train match.</pre>' );
			}

                        $this->thing->log( '<pre> Agent "Train" did not respond to any keywords</pre>' );

			//$this->characterList();

                        return "Request not understood";

        	}





		$this->thing->log('<pre>Agent "Train" is reading multiple words.</pre>');


		foreach ($pieces as $key=>$piece) {
//$this->thing->log($piece);
//exit();
			foreach ($keywords as $command) {
				
				if (strpos(strtolower($piece),$command) !== false) {

//$this->thing->log("Matched command piece" . $piece . $command);

					switch($piece) {
						case 'name':	

							if ($key + 1 > count($pieces)) {
                $this->thing->log('<pre>Agent "Train" matched "name" as last word.</pre>');

								//echo "last word is stop";
								$this->stop = false;
								return "Request not understood";
							} else {
                $this->thing->log('<pre>Agent "Train" matched "name" in "' . $this->subject . '".</pre>');



								//echo "next word is:";
								//var_dump($pieces[$index+1]);
								$check = $pieces[$key+1]; // Have this return up to four words
								if ( ($check == "is") or ($check == "train") ) {
									$adjust = 1;
								} else {
									$adjust=0;
								}

								$slice = array_slice($pieces, $key + 1 + $adjust);
								$head_code = implode($slice, " ");
								$this->response = $this->nameTrain($head_code);
								return $this->response;
							}
							break;

                                                case 'new':

							//$this->thing->log("new found");

                                                        if ($key + 1 > count($pieces)) { // Last word is new
                $this->thing->log('<pre>Agent "Train" matched "new" as last word.</pre>');


	                                                        $this->resetTrain();
	                                                        return "Train reset";
                                                        } else {
                $this->thing->log('<pre>Agent "Train" matched "new".</pre>');


if (strpos($input, 'random') !== false) {
                $this->thing->log('<pre>Agent "Train" matched "new" with "random".</pre>');
                //$this->thing->log("new followed by random");
	        $this->randomTrain();
		$this->trainReport();
                return "Random train created";

}



								switch ($pieces[$key + 1]) {
									case 'random':
                $this->thing->log('<pre>Agent "Train" matched "new" followed by "random".</pre>');


										//$this->thing->log("new followed by random");
										$this->randomTrain();
		                                                                return "Train created";

								}



                                                        }

                $this->thing->log('<pre>Agent "Train" matched "new" but nothing else.</pre>');





							$this->resetTrain();
							return "Train reset";
                                                        //echo 'bus';
                                                        break;

						case 'list':
							$this->trainList();

//echo $this->sms_message;
//exit();
                $this->thing->log('<pre>Agent "Train" matched "list".</pre>');


							return "Train list created";
                                                case 'info':

                $this->thing->log('<pre>Agent "Train" matched "report".</pre>');
                                                        $this->trainInformation($this->head_code);
                                                        return "Train report created";

                                                case 'information':

                $this->thing->log('<pre>Agent "Train" matched "report".</pre>');
                                                        $this->trainInformation($this->head_code);
                                                        return "Character report created";



						case 'report':

                $this->thing->log('<pre>Agent "Train" matched "report".</pre>');
							$this->trainReport($this->head_code);
							return "Train report created";
							//echo 'bus';
							break;

						default:

 $this->thing->log('<pre>Agent "Train" did not multiple-match.</pre>');
//$this->characterInfo();

							//echo 'default';

					}

				}
			}

		}

                $this->thing->log('<pre>Agent "Train" did not match anything in the subject "' . $this->subject . '".</pre>');


// $this->thing->log("Agent Character did not match.");
 //$this->characterHelp();

		return "Message not understood";
	}



}




?>



