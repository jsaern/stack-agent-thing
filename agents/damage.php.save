<?php

//echo "Watson says hi<br>";

require_once '/var/www/html/stackr.ca/agents/message.php';

class Damage {

	public $var = 'hello';


    function __construct(Thing $thing, $text = null) {


		$this->agent_name = 'damage';
        $this->agent_prefix = 'Agent "' . ucwords($this->agent_name) . '" ';
		$this->test= "Development code";

        $this->agent_input = $text;

//      This is how old roll.php is.
//		$thingy = $thing->thing;
		$this->thing = $thing;

        $this->thing_report  = array("thing"=>$this->thing->thing);
        $this->start_time = $this->thing->elapsed_runtime();



        $this->uuid = $thing->uuid;
        $this->to = $thing->to;
        $this->from = $thing->from;
        $this->subject = $thing->subject;


        $this->thing->log($this->agent_prefix . 'running on Thing '. $this->thing->nuuid . '.');
        $this->thing->log($this->agent_prefix . "received this Thing ".  $this->subject . '".');

        $this->doDamage();
		$this->readSubject();

		$this->thing_report = $this->respond();

        $this->thing->log( $this->agent_prefix .'ran for ' . number_format( $this->thing->elapsed_runtime() - $this->start_time ) . 'ms.' );
        $this->thing_report['log'] = $this->thing->log;

		return;

	}


// -----------------------

	private function respond() {


		$this->thing->flagGreen();

		$to = $this->thing->from;
		$from = "hashmessage";





//        $response = $input . "Try " . strtoupper($v) . ".";



        if ($this->agent_input == null) {
            $array = array('miao','miaou','hiss','prrr', 'grrr');
            $k = array_rand($array);
            $v = $array[$k];

            $response = "DAMAGE | " . strtolower($v) . ".";


            $this->cat_message = $response;
        } else {
            $this->cat_message = $this->agent_input;
        }
        //$this->sms_message = "TIMEOUT";

//        if ($this->agent_input != null) {
            $this->sms_message = "" . $this->cat_message;
//        }

//        $this->sms_message .= " | " . number_format( $this->thing->elapsed_runtime() ) . "ms.";

			

        $choices = false;

		$this->thing_report[ "choices" ] = $choices;
 		$this->thing_report["info"] = "This creates a hashtag message."; 
 		$this->thing_report["help"] = "This is about informational message injection.";

		$this->thing_report['sms'] = $this->sms_message;
		$this->thing_report['message'] = $this->sms_message;
        $this->thing_report['txt'] = $this->sms_message;


        $message_thing = new Message($this->thing, $this->thing_report);
        $thing_report['info'] = $message_thing->thing_report['info'] ;


		return $this->thing_report;


	}
/*
    function extractRoll($input) {

//echo $input;
//exit();

preg_match('/^(\\d)?d(\\d)(\\+\\d)?$/',$input,$matches);

print_r($matches);

$t = preg_filter('/^(\\d)?d(\\d)(\\+\\d)?$/',
                '$a="$1"? : 1;for(; $i++<$a; $s+=rand(1,$2) );echo$s$3;',
                $input)?:'echo"Invalid input";';


    }
*/



	public function readSubject()
    {


        //$input = strtolower($this->subject);


		return false;
    }

    function doDamage()
    {

        //$thingreport = $db->random();
        $thingreport = $this->thing->db->random();

        $uuid = $thingreport['things']->uuid; // Quest that random only returns one thing and this is misnamed
    // Get the balance

//  echo "isRed() ?"; $thing->isRed();

//  $thing_balance = $thing->account['thing']->balance;
//  $stack_balance = $thing->account['stack']->balance;
        echo "<pre>";
        echo "damagehandler randomly selected Thing " . $uuid . " from this stack.";
        echo "</pre>";

        $thing = new Thing($uuid);

        if ( $thing->isRed() ) {echo "red";return;} // Don't remove a Thing that is working.

        // Get the stack balance.

        if ( isset($thing->account['stack']) ) {
            $stack_balance = $thing->account['stack']->balance;
        } else {
            echo "No stack balance";
            // Legacy condition.  Or forager.
            // Flip a coin
            $d2 = rand(1,2);
            if($d2 == 2) {$thing->Forget();echo "Forgot Thing"; return;} // Critical success
            return;
        }





        echo "<pre>";
        echo "Start balance: " . $stack_balance['amount'];
        echo "</pre>";

        // The stack balance is distributed.  So debiting the
        // stack balance on the Thing destroys stack value.

        // Choice is how to do that.
        // So lets say our OP power is STR = 4.  Skill = 4 * 4 = 16. +1 +2.  19.
        // Roll D20.
        // If less than 19 then pass.  If 19.  Then fail.  If 20 critical success.

        $shell = 50;

        if ($remaining_budget < $shell ) {
            $value_destroyed = $damage_budget - $remaining_budget;
            echo "Value destroyed: " . $value_destroyed;
            return $value_destroyed;
        }

        $remaining_budget -= $shell;


        $modifier = 7;
        $d20 = rand(1,20);  
        echo "Rolled: " . $d20 . " | " . $modifier; 

        if($d20 == 20) {$thing->Forget();echo "Critical Hit > Forgot Thing"; return;} // Critical success
        if($d20 == 1) {echo "Critical Fail";return;} // Critical fail

        $hit = round( ($modifier + $d20)/20  * $shell);

        echo "<pre>";
        echo "Hit points: " .$hit;
        echo "</pre>";  

        $thing->account['stack']->Debit($hit);

        $updated_balance = $thing->account['stack']->balance;

        echo "<pre>";
        echo "Updated balance: " . $updated_balance['amount'];
        echo "</pre>";
        if ( $updated_balance['amount'] < 0 ) {
            $thing->Forget();
            echo "Destroyed > Forgot Thing";
        }
    }

//    $value_destroyed = $damage_budget - $remaining_budget;
//    echo "<pre>";
//    echo "damagehandler destroyed " . $value_destroyed . " units of value";
//    return $value_destroyed;

//}

//}


//return;


  //  }

}



return;
