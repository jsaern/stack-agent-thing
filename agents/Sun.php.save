<?php
/**
 * Time.php
 *
 * @package default
 */

namespace Nrwtaylor\StackAgentThing;

ini_set('display_startup_errors', 1);
ini_set('display_errors', 1);
error_reporting(-1);

ini_set("allow_url_fopen", 1);

class Sun extends Agent
{
    public $var = 'hello';

    /**
     *
     * @param Thing   $thing
     * @param unknown $text  (optional)
     */
    function init()
    {
        $this->test = "Development code";

        $this->thing_report["info"] =
            "This connects to an authorative time server.";
        $this->thing_report["help"] = "Get the time. Text CLOCKTIME.";

        $this->initSun();

    }

    function initSun()
    {
        // Solar observations are dependant on where you are.
        // Get the time.
        $this->time_agent = new Time($this->thing, "time");
        //$this->default_time_zone = 'America/Vancouver';
        $this->time_zone = $this->time_agent->time_zone;


        $this->sun_resource = 'sun/sun.php';
        if (
            isset(
                $this->thing->container['api']['sun']['sun_resource']
            )
        ) {
            $this->sun_resource =
                $this->thing->container['api']['sun'][
                    'sun_resource'
                ];
        }

        if (file_exists($this->resource_path .
            $this->sun_resource)) {

        $sun_resource = require $this->resource_path .
            $this->sun_resource;
        }

        $this->sun_resource = $sun_resource;
php ./    }



    }

    /**
     *
     */
    function makeSMS()
    {
        $this->node_list = ["sun" => ["sun","moon","venus"]];
        $m = strtoupper($this->agent_name) . " | " . $this->response;
        $this->sms_message = $m;
        $this->thing_report['sms'] = $m;
    }

    /**
     *
     */
    function makeChoices()
    {
        $choices = false;
        $this->thing_report['choices'] = $choices;
    }

    /**
     *
     * @param unknown $text (optional)
     * @return unknown
     */
    public function textSun($text)
    {
        return "The Sun will rise tomorrow".
    }

    function doSun($text = null)
    {
        $this->sun_message = $this->response;

        return $text;
    }

    public function predictSun($text = null)
    {
        // So. This function exists.
        // https://www.php.net/manual/en/function.date-sun-info.php

        // Given a Unix timestamp (epoch time)
        // Convert that to a Local Meridian Time.
        // If you know the latitude and longitude in degrees.

        // TODO: Test

        $longitude_agent = new Longitude($this->thing, "longitude");

	// Cannot calculate local time without knowing longitude.
	if ($longitude_agent->longitude === false) {return true;}

        $longitude = $longitude_agent->longitude;

        $latitude_agent = new Latitude($this->thing, "latitude");
        $latitude = $latitude_agent->latitude;

        //$latitude = 49.2827;

        $timestamp_epoch = time();
        if ($text != null) {
            $timestamp_epoch = strtotime($text);
        }

        $solar_array = date_sun_info($timestamp_epoch, $latitude, $longitude);

        $transit_epoch = $solar_array['transit'];

        $offset = $timestamp_epoch - $transit_epoch; // seconds

        // So at the specific provided epoch time.
        // Which was now.

        // Noon offset in decimal hours.
        $x = 12 * 60 * 60 + $offset;

        // Use gmdate to get an hour minute seconds text stamp.
        $t = gmdate("H:i:s", $x); // How many H:i:s solar noon was ago.

$solar_array('solar_noon'=>$t);
return $solar_array;
    }

    public function linksSun() {


    }

    /**
     *
     * @return unknown
     */
    public function readSubject()
    {
        //$input = $this->input;
        //if (stripos($input, "lmt") !== false) {$this->timezone="lmt";}

        if ($this->agent_input == "time") {
            return;
        }
        $this->filtered_input = $this->assert($this->input, "time");

        if ($this->filtered_input != "") {
            $timezone = $this->extractTimezone($this->filtered_input);
        }

        if (isset($timezone) and is_string($timezone)) {
            $this->time_zone = $timezone;
        }

        $this->doTime();
        return false;
    }
}
